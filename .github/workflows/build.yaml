name: Build UDT

on:
  push:
    branches:
      - main
      - gh-workflow
  pull_request:
    branches:
      - main

jobs:
  build-windows-msvc:
    runs-on: windows-latest
    steps:
      - name: Install Visual Studio 2017
        run: |
          choco install visualstudio2017community --force
          choco install dotnet4.0 dotnet4.5
        shell: powershell

      - name: net path
        run: vswhere -legacy -version [15.0,16.0)

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v2
        with:
          vs-version: '[15.0,16.0)'

      - name: Find VS 2017 Path
        id: find-vs
        run: |
          $vsPath = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -version [15.0,16.0) -property installationPath
          echo "VS Installed at: $vsPath"
          echo "VS_PATH=$vsPath" >> $env:GITHUB_ENV
        shell: powershell

      - name: Set up PATH variables
        run: |
          echo "$env:VS_PATH\Common7\Tools" >> $env:GITHUB_PATH
          echo "$env:VS_PATH\VC\Tools\MSVC\14.16.27023\bin\Hostx64\x64" >> $env:GITHUB_PATH
        shell: powershell

      - name: Run vcvarsall.bat to Set Up VS Environment
        run: |
          call "%VS_PATH%\VC\Auxiliary\Build\vcvarsall.bat" x64
          echo "Visual Studio environment configured!"
        shell: cmd

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run premake '5.0.0-beta1'
        uses: eariassoto/setup-premake@v1
        with:
          version: '5.0.0-beta1'
          action: 'vs2022'
          options: '--file=UDT_DLL/premake/premake5.lua'

      - name: Compile with MSVC
        run: |
          cd UDT_DLL/premake
          # msbuild ..\.build\vs2022\UDT.sln /p:Configuration=Release /p:Platform=x64 /target:UDT # /target:UDT_cutter /target:UDT_splitter /target:UDT_timeshifter /target:UDT_merger /target:UDT_json /target:UDT_captures /target:UDT_converter /target:tut_multi_rail /target:tut_players

      - name: Compile UDT_GUI with MSVC
        run: |
          cd UDT_GUI
          call "%VS_PATH%\VC\Auxiliary\Build\vcvarsall.bat" x64
          msbuild UDT.sln /p:Configuration=Release /p:Platform=x64 /target:UDT
        shell: cmd

      - name: ls
        run: ls UDT_GUI/.bin

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-msvc-x64-release
          path: |
            UDT_DLL/.bin/vs2022/x64/release/.exe
            UDT_GUI/.bin/*.exe

  build-windows-gcc:
    if: false
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install MingW
        uses: msys2/setup-msys2@v2
        with:
          msystem: MINGW64
          install: mingw-w64-x86_64-gcc

      - name: Generate Makefiles
        shell: bash
        run: |
          cd UDT_DLL/premake
          ./gcc_generate.cmd

      - name: Compile with GCC
        shell: bash
        run: |
          cd UDT_DLL/premake
          ./gcc_compile.cmd

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-gcc-binaries
          path: UDT_DLL/.bin

  build-linux-gcc:
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y build-essential

      - name: Generate Makefiles
        run: |
          cd UDT_DLL/premake
          chmod +x gcc_generate.sh
          ./gcc_generate.sh

      - name: Compile with GCC
        run: |
          cd UDT_DLL/premake
          chmod +x gcc_compile.sh
          ./gcc_compile.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-gcc-binaries
          path: UDT_DLL/.bin
